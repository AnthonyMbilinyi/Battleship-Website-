<!DOCTYPE html>
<html>
<head>
  <title>Battleship</title>
  <style>
    body {
      font-family: sans-serif;
      text-align: center;
    }
    #gameBoard {
      display: grid;
      grid-template-columns: repeat(10, 50px); 
      grid-template-rows: repeat(10, 50px);
    }
    .cell {
      width: 50px;
      height: 50px;
      border: 1px solid black;
      display: flex;
      justify-content: center;
      align-items: center;
    }
    .hit {
      background-color: red;
    }
    .miss {
      background-color: lightgray;
    }
    .ship {
      background-color: blue;
    }
  </style>
</head>
<body>

  <h1>Battleship</h1>

  <div id="gameBoard"></div>

  <script>
    const gameBoard = document.getElementById('gameBoard');
    const boardSize = 10;

    // Create a 2D array to represent the game board
    let board = [];
    for (let i = 0; i < boardSize; i++) {
      board[i] = [];
      for (let j = 0; j < boardSize; j++) {
        board[i][j] = 0; // 0: Empty, 1: Ship, 2: Hit, 3: Miss
      }
    }

    // Function to create the game board HTML
    function createBoard() {
      for (let i = 0; i < boardSize; i++) {
        for (let j = 0; j < boardSize; j++) {
          const cell = document.createElement('div');
          cell.classList.add('cell');
          cell.id = `cell-${i}-${j}`;
          cell.addEventListener('click', () => {
            makeGuess(i, j);
          });
          gameBoard.appendChild(cell);
        }
      }
    }

    // Function to place ships randomly (simplified)
    function placeShips() {
      // ... (Implement ship placement logic here) ...
    }

    // Function to handle player's guess
    function makeGuess(row, col) {
      if (board[row][col] === 1) {
        board[row][col] = 2; // Hit
        document.getElementById(`cell-${row}-${col}`).classList.add('hit');
        // Check for game over (all ships sunk)
      } else {
        board[row][col] = 3; // Miss
        document.getElementById(`cell-${row}-${col}`).classList.add('miss');
      }
    }

    // Initialize the game
    createBoard();
    placeShips(); 

  </script>

</body>
</html>

Explanation:
 * HTML Structure:
   * Creates a basic HTML structure with a title and a container (<div id="gameBoard">) for the game board.
   * Includes CSS styles for the board, cells, and hit/miss states.
 * JavaScript Logic:
   * board array: A 2D array represents the game board, where:
     * 0: Empty cell
     * 1: Ship
     * 2: Hit
     * 3: Miss
   * createBoard() function:
     * Creates a grid of cells within the gameBoard container.
     * Assigns unique IDs (cell-${row}-${col}) to each cell.
     * Attaches a click event listener to each cell to handle player guesses.
   * placeShips() function:
     * (Simplified in this example) This function would typically place ships randomly on the board with constraints (e.g., ships cannot overlap).
   * makeGuess() function:
     * Updates the board array with the result of the player's guess (hit or miss).
     * Updates the cell's visual appearance accordingly (red for hit, gray for miss).
     * (To be added) Checks for game over conditions (all ships sunk).
   * Initialization:
     * Calls createBoard() to generate the initial game board.
     * Calls placeShips() to place the ships on the board.
To improve this code:
 * Implement placeShips(): Create a more robust ship placement logic that:
   * Randomly places ships of different lengths (e.g., 5, 4, 3, 3, 2).
   * Ensures ships do not overlap or extend beyond the board boundaries.
 * Add game logic:
   * Implement turn-based gameplay (player vs. computer or player vs. player).
   * Track player scores and game status (win/lose).
   * Provide feedback to the player (e.g., "Hit!", "Miss!", "You sunk a ship!").
 * Enhance UI/UX:
   * Improve the visual appearance of the game board.
   * Add animations or sound effects for hits and misses.
   * Provide clear instructions and feedback to the player.
This is a basic foundation for building a Battleship game. You can expand on this by adding more features and refining the game logic to create a more engaging and challenging experience.
 * https://github.com/djandriud/version1.1
 * https://github.com/TranDat1114/Tic-Tac-Toe
